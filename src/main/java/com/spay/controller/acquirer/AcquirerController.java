package com.spay.controller.acquirer;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.UUID;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import com.google.gson.Gson;
import com.spay.model.merchant.MailOption;
import com.spay.model.merchant.Merchant;
import com.spay.model.otpmessage.OTPMessage;
import com.spay.model.uam.AuditTrial;
import com.spay.service.merchant.MerchantService;
import com.spay.service.otpmessage.OTPMessageService;
import com.spay.model.transaction.TransationMonitoring;

import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

@Controller
public class AcquirerController {
	
	
	private static Random random = new Random((new Date()).getTime());

	
	@Autowired
	MerchantService merchantService;
	
	@Autowired
	OTPMessageService otpmessageService;
		
	/**
	 * @return
	 */
	@RequestMapping(value = "/addmerchant", method = RequestMethod.POST)
	public ModelAndView addNewMerchant(
			@RequestParam("merchantId") String merchantId,
			@RequestParam("merchantName") String merchantName,
			@RequestParam("merchantEmailId") String emailId,
			@RequestParam("merchantBusiness") String mcccode,
			@RequestParam("merchantregion") String merchantregion,
			@RequestParam("merchantDOB") String DOB,
			@RequestParam("merchantMobile") String merchantMobile,
			@RequestParam("merchantTel") String merchantTel,
			@RequestParam("merchantAddress") String merchantAddress,
			@RequestParam("merchantCountry") String merchantCountry,
			@RequestParam("transactionfee") String transactionfee,
			@RequestParam("procode") String procode,
			@RequestParam("feessetting") String feessetting,
			HttpServletRequest request)
	{
		AuditTrial audit = new AuditTrial();
		   HttpSession sessionObj = request.getSession();
		System.out.println("merchantId==>"+merchantId);
		
		@SuppressWarnings("unused")
		ModelAndView model = new ModelAndView();
		
	    Merchant merchant = new Merchant();
	    
	    merchant.setMerchantId(merchantId);
	    merchant.setMerchantName(merchantName);
	    merchant.setEmailId(emailId);
	    merchant.setMcccode(mcccode);
	    merchant.setRegion(merchantregion);
	    
	    merchant.setProductform(procode);
	    merchant.setFeessetting(feessetting);
	    merchant.setActive(false);
	    
	    
	    DateFormat df2 = new SimpleDateFormat("dd/MM/yyyy"); 
       
        Date merchantDOB;
		try {
			merchantDOB = (Date)df2.parse(DOB);
			 merchant.setDOB(merchantDOB);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		   
		
		
		
		 merchant.setMobile(Long.parseLong(merchantMobile));
		 
		 System.out.println("merchantTel==>"+merchantTel);
		 
		 if(merchantTel!=""){
	
		    merchant.setTelephone(Long.parseLong(merchantTel));
		 }else{
			 merchant.setTelephone(0);
		 }
		 merchant.setAddress(merchantAddress);
		 merchant.setCountry(merchantCountry);
		 
		 System.out.println("merchantTel==>"+transactionfee);
		 
		 if(transactionfee!=""){
		   merchant.setTransactionfee(Long.parseLong(transactionfee));
		 }else{
			 merchant.setTransactionfee(0);
		 }
	   
	   
	    
	   String  randomPwd = generateRandomString();
	   String  merchantRefNo = UUID.randomUUID().toString().replaceAll("-", "");
	   
	   
	   String encryptedPwd = encrypt(randomPwd);
	   System.out.println("merchantId==>"+encryptedPwd);
	   
	   
	   
	   
	   if(merchantRefNo!=null){
	     merchant.setMerchant_ref_no(merchantRefNo);
	   }else{
		 merchant.setMerchant_ref_no("");  
	   }  
	   
	   if(encryptedPwd!= null)
	       merchant.setAutogeneratedPassword(encryptedPwd.replace('/',' '));
	   else
		   merchant.setAutogeneratedPassword("");
	      
	       
	       merchant.setActive(false);
	       merchantService.addNewMerchant(merchant);
	       
		   sendEmailActivationLink(emailId,request,merchant);
		   
		   
		 // return "acquirer/merchants";
		   
		   System.out.println("merchant.getMerchantName()===>"+merchant.getMerchantName());
		   
		   System.out.println("merchant.getMerchantName()===>"+merchant.getEmailId());
		   
		   model.addObject("merchantName",merchant.getMerchantName());
		   model.addObject("merchantMailId",merchant.getEmailId());
		   
		   model.setViewName("acquirer/emailsentmsg");
		   
		 //--create the audit log start-----
		  try{
		   DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		   //get current date time with Date()
		   Date date = new Date();
		   System.out.println("date and time==>"+dateFormat.format(date));
		  		   
		   String adminname = (String) sessionObj.getAttribute("adminname");
		   audit.setUsername(adminname);
		   audit.setDescription("Insert the merchent '"+merchantName+"'");
		   audit.setLogdate(dateFormat.format(date));
		   
		   int auditid = merchantService.saveAudit(audit);
		   
		  }catch(Exception e){
			  e.printStackTrace();
		  }
		   
		   
		   //--audit log end--
		   
		   return model;
		  
	}
	
	
	@RequestMapping(value = "/{pagename}", method = RequestMethod.GET)
	public ModelAndView merchantpage(HttpServletRequest request,@PathVariable("pagename") String pagename) {
		
		ModelAndView model = new ModelAndView();
		
		  if(pagename.equalsIgnoreCase("merchants")){
		   model = new ModelAndView("merchants");
		 }else if(pagename.equalsIgnoreCase("users")){
		   model = new ModelAndView("users");  
		 }else if(pagename.equalsIgnoreCase("transaction_reports")){
			   model = new ModelAndView("transaction_reports");  
		 }else if(pagename.equalsIgnoreCase("Settlement")){
			   model = new ModelAndView("Settlement");  
		 }
		
		return model;
	}
	
	
	
	
	@RequestMapping(value = "/{saveOTPmessage}", method = RequestMethod.POST)
	public ModelAndView saveOTPmessage(HttpServletRequest request) {
		
		ModelAndView model = new ModelAndView();
		
		OTPMessage otpmessageObj = new OTPMessage();
		
		@SuppressWarnings("unused")
		String otpMessage = request.getParameter("otpmessage");
		String otpEffdate = request.getParameter("effectivedate");
	
		Date date = null;

		DateFormat format2 = new SimpleDateFormat("dd/MM/yyyy");
	
		try {
	
			AuditTrial audit = new AuditTrial();
			   HttpSession sessionObj = request.getSession();
			
			
			/* DateFormat df2 = new SimpleDateFormat("dd/MM/yyyy"); 
		       
		        Date merchantDOB;
		  try {
		   merchantDOB = (Date)df2.parse(DOB);
		    merchant.setDOB(merchantDOB);
		  } catch (ParseException e) {
		   // TODO Auto-generated catch block
		   e.printStackTrace();
		  }
			*/
			
			
			
			date = (Date)format2.parse(otpEffdate);
			
			System.out.println("date after formatting===>"+date);
						
			otpmessageObj.setOtpmessage(otpMessage);
			otpmessageObj.setOtpeffectivedate(date);
			
			otpmessageService.saveOTPMessageTemplate(otpmessageObj);
			
			//--insert audit start --
			
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			   //get current date time with Date()
			   Date date1 = new Date();
			   System.out.println("date and time==>"+dateFormat.format(date1));
			  		   
			   String adminname = (String) sessionObj.getAttribute("adminname");
			   audit.setUsername(adminname);
			   audit.setDescription("Insert the 'OTP Mesage Form'");
			   audit.setLogdate(dateFormat.format(date1));
			   
			   int auditid = merchantService.saveAudit(audit);
			//--audit end --
			
			model.addObject("effectivedate",otpEffdate);
			model.setViewName("acquirer/otpsentsuccess");
	 
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return model;
	}
	
	

	@RequestMapping(value = "/saveOTPexpiryperiod", method = RequestMethod.POST)
	public ModelAndView saveOTPexpiryperiod(HttpServletRequest request) {
		
		System.out.println("In saveOTPexpiryperiod===>");
		
		ModelAndView model = new ModelAndView();
		
		OTPMessage otpmessageObj = new OTPMessage();
		
		@SuppressWarnings("unused")
		
		String otpexpiryperiod = request.getParameter("otpexpiryperiod");//
		String otpexpiryeffectivedate = request.getParameter("otpeffectivedate");//otpeffectivedate
	
		Date date = null;

		DateFormat format2 = new SimpleDateFormat("dd/MM/yyyy");
	
		try {
	
			AuditTrial audit = new AuditTrial();
			   HttpSession sessionObj = request.getSession();
			date = format2.parse(otpexpiryeffectivedate);
			
			System.out.println("date===>"+date);
						
			
			
			otpmessageObj.setOtpexpiryperiod(otpexpiryperiod);
			otpmessageObj.setOtpexpiryeffectivedate(date);
			
		     boolean isupdated = otpmessageService.updateOTPexpiryperiod(otpmessageObj);
			
			model.addObject("otpexpiryperiod",otpexpiryperiod);
			model.addObject("otpexpiryeffectivedate",otpexpiryeffectivedate);
			
			if(isupdated){
				model.addObject("updatedStatus","1");
			}else{
				
				model.addObject("updatedStatus","0");
			}
			
			//--insert audit start --
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			   //get current date time with Date()
			   Date date1 = new Date();
			   System.out.println("date and time==>"+dateFormat.format(date1));
			  		   
			   String adminname = (String) sessionObj.getAttribute("adminname");
			   audit.setUsername(adminname);
			   audit.setDescription("Insert the 'OTP Expiry Period Form'");
			   
			   audit.setLogdate(dateFormat.format(date1));
			   int auditid = merchantService.saveAudit(audit);
			//--insert audit end --
			
			model.setViewName("acquirer/otpexpiryperiodform");
	 
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return model;
	}
	
	
	
	
	@RequestMapping(value = "/redirectToOTPmessageform")
	public String redirectToOTPmessageform(HttpServletRequest request) {
		
		System.out.println("redirectToOTPmessageform");
		
		return "acquirer/otpmessageform";
	}
	
	
	
	
	
	@RequestMapping(value = "/merchantIdExistCheck", method = RequestMethod.GET)
	public @ResponseBody String merchantIdExistCheck(HttpServletRequest request) {
				
		String strMerChantId = request.getParameter("merchantid");
		String json=null;
				
		boolean isMercahntAlreadyExists = merchantService.merchantIdExistCheck(strMerChantId);
		
		if(isMercahntAlreadyExists)
		{
			//model.setViewName("merchant/index");
			json = new Gson().toJson("1");
			
		}
		else
		{
		  /* model.addObject("authenticationStatus","Invalid Crentials");
		   model.setViewName("merchant/login");*/
		   //json = new Gson().toJson("0");
		}
		
		System.out.println("json===>"+json);
		
		 return json;
	}
	
	//public void sendEmailActivationLink(@RequestParam("merchantEmailId") String emailId,@RequestParam("merchantname") String MercantName,HttpServletRequest request){
		
		
	public void sendEmailActivationLink(String emailId,HttpServletRequest request,Merchant merchant){
		
		String MercantName = merchant.getMerchantName(); 
	
		Date date = new Date();
		String dateformat = new SimpleDateFormat("MM-dd-YYYY").format(date);
		
		StringBuilder tableContent = new StringBuilder();
		tableContent.append("<html><body>");
		tableContent.append("<table border='0' style='border:none;'>");
		tableContent.append("<tr>");
		tableContent.append("<td >" + "Dear" + " " + MercantName + ", "+ "</td>");
		tableContent.append("</tr>");
		tableContent.append("<br>");
		tableContent.append("<tr>");
		tableContent.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + "Congratulations!!!" + "</td>");
		tableContent.append("</tr>");
		tableContent.append("<br>");

		tableContent.append("<tr>");
		tableContent.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + "Please click on the following link to activate Your Registration" + "</td>");
		tableContent.append("</tr>");
		tableContent.append("<br>");

		String serverUrl = null;
		if(request.getServerPort()==0){
			serverUrl = request.getScheme() + "://"
					+ request.getServerName() + request.getContextPath();
		}else{
			serverUrl = request.getScheme() + "://"
					+ request.getServerName() + ":" + request.getServerPort()
					+ request.getContextPath();
		}
		
		tableContent.append("<tr>");
		tableContent.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. <a href="+serverUrl+"/activateMerchant?id="+merchant.getId()+">" + "click here to activate?"+merchant.getMerchant_ref_no()+"</a></td>");
		tableContent.append("</tr>");
		tableContent.append("<br>");
		
        tableContent.append("<tr>");
		tableContent.append("<td  align=\"right\" >" + dateformat + "</td>");
		tableContent.append("</tr>");
		tableContent.append("<br>");

		tableContent.append("</table>");

		tableContent.append("</table></body></html>");
		
		
		String[] sendEmailIds = new String[1];
		sendEmailIds[0] = emailId;
		
		Multipart mp = new MimeMultipart();
		MimeBodyPart htmlPart = new MimeBodyPart();
		
		try {
			htmlPart.setContent(tableContent.toString(), "text/html");
			mp.addBodyPart(htmlPart);
		} catch (MessagingException e) {
		}
		
		
		try {
			sendMultipartEmailWithForCase(sendEmailIds, emailId,mp);
		} catch (AddressException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
	}
	
	
	
	
	public  void sendMultipartEmailWithForCase(String[] clinicalEmailIds,
			String ccEmail, Multipart bodyContent) throws AddressException, MessagingException {
		
		MailOption mailOption = new MailOption();
		mailOption.setForceSystemConfiguredSender(true);
		mailOption.setAuthenticate(true);
		mailOption.setTo(clinicalEmailIds);
		mailOption.setCc(new String[] { ccEmail });
		mailOption.setSubject("Welcome to SPAY!");
		mailOption.setMultipart(bodyContent);
		sendMultipartMail(mailOption);
	}
	
	
	
	
	public boolean sendMultipartMail(final MailOption mailOption) {
		try {
			Properties props = System.getProperties();
			props.put("mail.transport.protocol", "smtp");
			//props.put("mail.smtp.host", "smtp.gmail.com");
			props.put("mail.smtp.host", "smtp.bcel.com.la");
	    	props.put("mail.smtp.port", "25");
	    	props.put("mail.smtp.auth", "true");
	    	props.put("mail.smtp.starttls.enable", "true");
	    	props.put("mail.smtp.starttls.required", "true");

			//Session session = Session.getInstance(props, null);
			
			Session session = Session.getDefaultInstance(props,
					new javax.mail.Authenticator() {
						protected PasswordAuthentication getPasswordAuthentication() {
							//return new PasswordAuthentication("dineshvgsmadurai","VGS@1234");
							//return new PasswordAuthentication("spay@bcel.com.la","bcel@123");
							return new PasswordAuthentication("spay@bcel.com.la","bcel@123");
						}
					});

			try {
				MimeMessage msg = new MimeMessage(session);
				
				System.out.println("mailOption : "+mailOption.getTo()[0]);
				
				//msg.setFrom(new InternetAddress("dineshvgsmadurai@gmail.com"));
				msg.setFrom(new InternetAddress("spay@bcel.com.la"));
     	        msg.setRecipient(Message.RecipientType.TO, new InternetAddress(mailOption.getTo()[0]));
		        msg.setSubject(mailOption.getSubject());
		        msg.setContent(mailOption.getMultipart());
		        
		        Transport.send(msg);
		    

			} catch (MessagingException e) {
				e.printStackTrace();
			}

		} catch (Exception e) {

		}
		return true;
	}
	
	
	
	
	
	@RequestMapping(value = "activateMerchant", method = RequestMethod.GET)
	public ModelAndView activateMerchant(HttpServletRequest request) {
		
		System.out.println("In activateMerchant");
		
		Integer merchantId = Integer.parseInt(request.getParameter("id"));
		
		ModelAndView model = new ModelAndView();
		Merchant merchant = new Merchant();
		
		
		merchant.setId(merchantId);
		//merchant
		if(merchant.isActive()==false){
		    merchant.setActive(true);
		}
		merchant = merchantService.activateMerchantById(merchant);
		
		//for success validation
		if(merchant!=null){
		    //sendEmailConfirmation();
			
			 merchant.setId(merchant.getId());
			 merchant.setMerchantId(merchant.getMerchantId());
			 merchant.setEmailId(merchant.getEmailId());
			 merchant.setMerchantName(merchant.getMerchantName());
			 merchant.setMerchant_ref_no(merchant.getMerchant_ref_no());
			 merchant.setRegion(merchant.getRegion());
			 merchant.setMcccode(merchant.getMcccode());
			 merchant.setChangedPassword(merchant.getChangedPassword());
			 merchant.setAutogeneratedPassword(merchant.getAutogeneratedPassword());
			 merchant.setActive(merchant.isActive());
			 
			 sendEmailConfirmation(merchant,request);
	}
		     
		model.addObject("merchantPKId", merchant.getId());
		model.addObject("merchantId", merchant.getMerchantId());
	    model.addObject("merchantAutogeneratedPassword", merchant.getAutogeneratedPassword().replace('/', ' '));
	
		model.addObject("merchantChangedPassword", merchant.getChangedPassword());
		
		model.setViewName("merchant/registrationsuccess");
		
		//return "merchant/login";
		return model;
	}
	
	
	
	@RequestMapping(value = "showTxnstatementresult", method = RequestMethod.POST)
	public ModelAndView showTxnstatementresult(HttpServletRequest request) {
		
		ModelAndView model = new ModelAndView();
		
		System.out.println("In showTxnstatementresult");
		
		String strMerchantId;
		String strTrnDate;
		String strCardNo;
		String strTrnRefNo;
		
		List<TransationMonitoring> transationMonitoringList = new ArrayList<TransationMonitoring>();
		
		try{
			
			strMerchantId =  request.getParameter("merchantId");
			strTrnDate =  request.getParameter("merchantDOB");
			strCardNo   =  request.getParameter("merchantCardNo");
			strTrnRefNo = request.getParameter("txnrefno");
			
			if(strMerchantId!=null){
				
				transationMonitoringList = merchantService.showTxnstatementresult(strMerchantId,strTrnDate,strCardNo,strTrnRefNo);
			}
			
			
			if(transationMonitoringList!=null){
				
				model.addObject("txnmonitoringList",transationMonitoringList);
				model.setViewName("acquirer/transactionstatementresults");
				
			}else{
				model.addObject("txnmonitoringList","emptylist");
				
			}
			
			model.setViewName("acquirer/transactionstatementresults");
			
		}catch(Exception ex){
			
			ex.printStackTrace();
		}
		
		
		
		return model;
		
	}
	
	
	
	
	
	

	
	
	/*@RequestMapping(value = "/merchantLoginPage/{merchantPKId}/{merchantId}", method = RequestMethod.GET)
	public ModelAndView authenticateCredentails(HttpServletRequest request,@PathVariable("merchantPKId") Integer id,@PathVariable("merchantId") String merchantid) {
		
		   ModelAndView model = new ModelAndView();
	        
		   model.addObject("merchantPKId", id);
		   model.addObject("merchantId", merchantid);
		   
		   model.setViewName("merchant/login");
		
		   //return "merchant/login";
		   
		   return model;
	}*/
	
	
	
		
	
 private void sendEmailConfirmation(Merchant merchant,
			HttpServletRequest request) {
    	  
		// TODO Auto-generated method stub
		String MercantName = merchant.getMerchantName(); 
    		
  		Date date = new Date();
  		String dateformat = new SimpleDateFormat("MM-dd-YYYY").format(date);
  		
  		StringBuilder tableContent = new StringBuilder();
  		tableContent.append("<html><body>");
  		tableContent.append("<table border='0' style='border:none;'>");
  		tableContent.append("<tr>");
  		tableContent.append("<td >" + "Dear" + " " + MercantName + ", "+ "</td>");
  		tableContent.append("</tr>");
  		tableContent.append("<br>");
  		tableContent.append("<tr>");
  		tableContent.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + "Your SPAY account has been activated!" + "</td>");
  		tableContent.append("</tr>");
  		tableContent.append("<br>");

  		tableContent.append("<tr>");
  		tableContent.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + "Your Merchant ID is "+merchant.getMerchantId() +"</td>");
  		tableContent.append("</tr>");
  		tableContent.append("<br>");
  		
  		
  		
  		tableContent.append("<tr>");
  		tableContent.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + "Your Username is "+merchant.getMerchantName() +"</td>");
  		tableContent.append("</tr>");
  		tableContent.append("<br>");
  		
  		
  		
  		String decryptedPwd = decrypt(merchant.getAutogeneratedPassword().replace('/', ' '));
  		
  		tableContent.append("<tr>");
  		tableContent.append("<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + "Your Password is "+decryptedPwd +"</td>");
  		tableContent.append("</tr>");
  		tableContent.append("<br>");

  		String serverUrl = null;
  		if(request.getServerPort()==0){
  			serverUrl = request.getScheme() + "://"
  					+ request.getServerName() + request.getContextPath();
  		}else{
  			serverUrl = request.getScheme() + "://"
  					+ request.getServerName() + ":" + request.getServerPort()
  					+ request.getContextPath();
  		}
  		
  		tableContent.append("<tr>");
  		
  		tableContent.append("</tr>");
  		tableContent.append("<br>");
  		
  	    tableContent.append("<tr>");
  		tableContent.append("<td  align=\"right\" >" + dateformat + "</td>");
  		tableContent.append("</tr>");
  		tableContent.append("<br>");

  		tableContent.append("</table>");

  		tableContent.append("</table></body></html>");
  		
  		
  		String[] sendEmailIds = new String[1];
  		sendEmailIds[0] = merchant.getEmailId();
  		
  		Multipart mp = new MimeMultipart();
  		MimeBodyPart htmlPart = new MimeBodyPart();
  		
  		try {
  			htmlPart.setContent(tableContent.toString(), "text/html");
  			mp.addBodyPart(htmlPart);
  		} catch (MessagingException e) {
  		}
  		
  		
  		try {
  			sendMultipartEmailWithForCase(sendEmailIds, merchant.getEmailId(),mp);
  		} catch (AddressException e) {
  			// TODO Auto-generated catch block
  			e.printStackTrace();
  		} catch (MessagingException e) {
  			// TODO Auto-generated catch block
  			e.printStackTrace();
  		}
  	    	  
	}


		public String generateRandomString() {
	      char[] values = {'a','b','c','d','e','f','g','h','i','j',
	               'k','l','m','n','o','p','q','r','s','t',
	               'u','v','w','x','y','z','0','1','2','3',
	               '4','5','6','7','8','9'};

	      String out = "";

	      for (int i=0;i<11;i++) {
	          int idx=random.nextInt(values.length);
	        out += values[idx];
	      }

	      System.out.println(out);
	      return out;
	    }
	
		
	public static String encrypt(String str) {
		    	
		    BASE64Encoder encoder = new BASE64Encoder();
	        byte[] salt = new byte[8];
	        random.nextBytes(salt);
	        return encoder.encode(salt) + encoder.encode(str.getBytes());
	 }
		  
		  
		  
	public static String decrypt(String encstr) {

		    if (encstr.length() > 12) {
                 String cipher = encstr.substring(12);
                 BASE64Decoder decoder = new BASE64Decoder();

	    	try {
                return new String(decoder.decodeBuffer(cipher));
            } catch (IOException e) {

	    	    //  throw new InvalidImplementationException(

	    	    //Fail
           }
	    }
	    	  
	    	  return null;

	 }		  
	
	
}
