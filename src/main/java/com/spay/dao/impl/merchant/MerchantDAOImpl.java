package com.spay.dao.impl.merchant;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.servlet.http.HttpServletRequest;

import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate4.HibernateTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import sun.misc.BASE64Decoder;

import com.spay.dao.AbstractDao;
import com.spay.dao.merchant.MerchantDAO;
import com.spay.model.merchant.Admin;
import com.spay.model.merchant.BranchCode;
import com.spay.model.merchant.DepartmentDesignation;
import com.spay.model.merchant.Merchant;
import com.spay.model.merchant.Securitytable;
import com.spay.model.transaction.CurrencyCode;
import com.spay.model.transaction.TransationMonitoring;
import com.spay.model.uam.AuditTrial;
import com.spay.model.uam.UserRegistration;


@Repository("merchantdao")
@Transactional
public class MerchantDAOImpl extends AbstractDao implements MerchantDAO{
	
	 private HibernateTemplate hibernateTemplate;
	 
	 HttpServletRequest request;
	 
	 @Autowired
	 public void setSessionFactory(SessionFactory sessionFactory) {
	        hibernateTemplate = new HibernateTemplate(sessionFactory);
	}

	public void addNewMerchant(Merchant merchant) {
		
		 try{
		    hibernateTemplate.save(merchant);
		  }catch(Exception e){
			  e.printStackTrace();
		  }
		  
		
		 
		
	}

	public Merchant activateMerchantById(Merchant merchant) {
		// TODO Auto-generated method stub 
		int result=0;
		
		
		List<Merchant> merchantList = null;
				 
		 String query = "update Merchant set is_active = 1 where id=:Id";
		 Query q =getSession().createQuery(query).setParameter("Id", merchant.getId());
         result=q.executeUpdate();
         System.out.println("result : "+result);
         
         if(result==1){
        	 String selquery = "from Merchant where id=:Id";
        	 Query insertq = getSession().createQuery(selquery).setParameter("Id",merchant.getId());
        	 
        	 if (insertq.list() != null && !insertq.list().isEmpty()) {
        		 merchantList = insertq.list();
 				if (merchantList != null && merchantList.size() > 0) {
 					merchant = (Merchant) merchantList.get(0);
 				}
 			}
         }
         
         return merchant;
		
	}

	@SuppressWarnings("unchecked")
	public boolean authenticateCredentails(String merchantId, String username,String password) {
		// TODO Auto-generated method stub
		
		  boolean isValidMerchant =false;
		  
		  List<Merchant> merchantList = null;
		  
		  String deCryptedPwd = null;
		
		  String strChangedPwd = null;
		  
		  Merchant merchant;
		  
		
		   String query = "from Merchant where merchant_Id = "+"'"+merchantId+"'" +" AND merchant_name = "+"'"+username+"'";
		   
		/*   query.setParameter("code", "7277");
		   List list = query.list();*/
		  
		   System.out.println("query===>"+query);
		   
		   
		   Query insertqforauth = getSession().createQuery(query);
		   
		   if (insertqforauth.list() != null && !insertqforauth.list().isEmpty()) {
			   merchantList = insertqforauth.list();
			     
			   System.out.println("=====merchantList===>"+merchantList);
			    
			   
			   if (merchantList != null && merchantList.size() > 0) {
				   
				         merchant = (Merchant) merchantList.get(0);
				       
				   
				   	 deCryptedPwd = decrypt(merchant.getAutogeneratedPassword());
				    
				     strChangedPwd = merchant.getChangedPassword();
					
					System.out.println("password====>"+password);
					
					System.out.println("deCryptedPwd====>"+deCryptedPwd);
					
					System.out.println("strChangedPwd====>"+strChangedPwd);
					
					
					 if(strChangedPwd==null && !deCryptedPwd.equalsIgnoreCase("")){
						System.out.println("In strChangedPwd blank");
						   if(merchantId.equals(merchant.getMerchantId()) && username.equals(merchant.getMerchantName()) && password.equals(deCryptedPwd)){
							isValidMerchant = true;
						   }else{
							isValidMerchant = false;
					       }
				     }else if(strChangedPwd!=null && !deCryptedPwd.equalsIgnoreCase("")){
					  System.out.println("In strChangedPwd not blank");
					  if(merchantId.equals(merchant.getMerchantId()) && username.equals(merchant.getMerchantName()) && password.equals(strChangedPwd)){
							isValidMerchant = true;
					   }else{
						   isValidMerchant = false;
					   }
					  
				  }	
				}
			}
		
		return isValidMerchant;
	}

	
	
	
	public static String decrypt(String encstr) {

	    if (encstr.length() > 12) {
             String cipher = encstr.substring(12);
             BASE64Decoder decoder = new BASE64Decoder();

    	try {
            return new String(decoder.decodeBuffer(cipher));
        } catch (IOException e) {
        	e.printStackTrace();
    	    //  throw new InvalidImplementationException(

    	    //Fail
         }
      }
    	  
    	  return null;
   }

	public boolean merchantIdExistCheck(String merchantId) {
		// TODO Auto-generated method stub
		
		@SuppressWarnings("unused")
		boolean ismerchantIdAlreadyExist=false;
		
		String query = "from Merchant where merchant_Id = "+"'"+merchantId+"'";
		
		Query getQryforalreadyExist = getSession().createQuery(query);
		
		if (getQryforalreadyExist.list() != null && !getQryforalreadyExist.list().isEmpty()) {
			
			System.out.println("merchantId already exist");
			ismerchantIdAlreadyExist = true;
   		    
		}
		
		return ismerchantIdAlreadyExist;
	}

	public boolean updateChangedPwd(String merchantId, String confirmedPwd) {
		// TODO Auto-generated method stub
		@SuppressWarnings("unused")
		boolean insertChangedPwd=false;
		
		int result = 0;
		
		try{
		    String query = "update Merchant set changed_password =  "+"'"+confirmedPwd+"'" +" where merchant_Id = "+"'"+merchantId+"'";
		
		    System.out.println("insertChangedPwd==>"+insertChangedPwd);
		
		
		   Query updateChangedPwd = getSession().createQuery(query);
		
	       result=updateChangedPwd.executeUpdate();
		 
		}catch(Exception e){
			
			 e.printStackTrace();
		}	
		
		if(result==1){
			
			insertChangedPwd = true;
		}
		
		 System.out.println("insertChangedPwd==>"+insertChangedPwd);
		
         return insertChangedPwd;	
	
		
	}

	public Merchant getMerchantByMerchantId(String merchantId) {
		// TODO Auto-generated method stub
		List<Merchant> merchantList = null;
				
		Merchant merchant = new Merchant();
		
		
        String getUpdatedrecquery = "from Merchant where merchant_Id = "+"'"+merchantId+"'";
		
		Query qry = getSession().createQuery(getUpdatedrecquery);
		
		if (qry.list() != null && !qry.list().isEmpty()) {
			
			System.out.println("merchantId already exist");
			  merchantList = qry.list();
			  
			  if (merchantList != null && merchantList.size() > 0) {
				  
				  merchant = (Merchant) merchantList.get(0);
				  
				  merchant.setId(merchant.getId());
				  merchant.setMerchantId(merchant.getMerchantId());
			  }
   		    
		}
	
	
      return merchant;
  }

	public List<Merchant> getMerchantdetails(String id) {

		System.out.println("ID" + id);
		List merchantdetails = null;
		try {
			//String selquery = "from Merchant where merchantId='"+id+"'";
			String selquery = "from Merchant where merchantId = "+"'"+id.trim()+"'";
			Query q = getSession().createQuery(selquery);
			if (q.list() != null && !q.list().isEmpty()) {
				merchantdetails = q.list();

			}
		}catch(Exception e){
			e.printStackTrace();
		}
		finally {

		}
		return merchantdetails;
	}
	
	public List<Merchant> getMerchantdetails() {

		
		List merchantdetails = null;
		try {
			String selquery = "from Merchant";
			Query q = getSession().createQuery(selquery);
			if (q.list() != null && !q.list().isEmpty()) {
				merchantdetails = q.list();

			}
		} finally {

		}
		return merchantdetails;
	}
	
	public void updatemodifydetails(Merchant merchant) {
		// TODO Auto-generated method stub
		System.out.println("DOB==>" + merchant.getDOB());

		getSession().update(merchant);
	}
	
	public List<Admin> admindetails(String adminid) {
		// TODO Auto-generated method stub
		System.out.println("ID==>" + adminid);
		List<Admin> merchantdetails = null;
		try {
			
			String selquery = "from Admin where admin_id = "+"'"+adminid+"'";
			
			System.out.println("getSession()==>>"+getSession()); 

			Query q = getSession().createQuery(selquery);  
			System.out.println("qqqqqqqqqqqqqqqq 1==>>"+q.list());
			if (q.list() != null && !q.list().isEmpty()) {
				System.out.println("qqqqqqqqqqqqqqqq 2==>>"+q.list());
				merchantdetails = q.list();

			}
		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
			
			
		}

		

		return merchantdetails;
	}	

	
	public List<TransationMonitoring> getDailyReport(String d23,String TransactionStatus) {
		// TODO Auto-generated method stub
		
        List reportList = null;
	
		//d23 =  "07/16/2015";
        
       System.out.println("d23==>"+d23);
       
		
		String[] strdateSplit= d23.split("-");
		
		String strMonth = strdateSplit[0];
		
		String strDate = strdateSplit[1];
		
		String strYear  = strdateSplit[2];
		
	    String strYearLasttwoDigits = strYear.substring(2);
	    
	    String strMonthinAplphabet = null;
	    
	    String strQryparam = null;
	    
	    
	    String selQry = null;
	    
	    if(strMonth.equals("01")){
	    	
	    	strMonthinAplphabet = "JAN";
	    	
	    }
	    
        if(strMonth.equals("02")){
	    	
	    	strMonthinAplphabet = "FEB";
	    	
	    }
        
       if(strMonth.equals("03")){
	    	
	    	strMonthinAplphabet = "MAR";
	    	
	    }
       
       if(strMonth.equals("04")){
	    	
	    	strMonthinAplphabet = "APR";
	    	
	    }
       
       if(strMonth.equals("05")){
	    	
	    	strMonthinAplphabet = "MAY";
	    	
	    }
       
       if(strMonth.equals("06")){
	    	
	    	strMonthinAplphabet = "JUN";
	    	
	    }
       
        if(strMonth.equals("07")){
	    	
	    	strMonthinAplphabet = "JUL";
	    	
	    }
        
        if(strMonth.equals("08")){
	    	
	    	strMonthinAplphabet = "AUG";
	    	
	    }
        
       if(strMonth.equals("09")){
	    	
	    	strMonthinAplphabet = "SEP";
	    	
	    }
       
       if(strMonth.equals("10")){
	    	
	    	strMonthinAplphabet = "OCT";
	    	
	    }
       
       if(strMonth.equals("11")){
	    	
	    	strMonthinAplphabet = "NOV";
	    	
	    }
       
       if(strMonth.equals("12")){
	    	
	    	strMonthinAplphabet = "DEC";
	    	
	    }

		
        strQryparam = strDate+"-"+strMonthinAplphabet+"-"+strYearLasttwoDigits;
        		
		System.out.println("strQryparam===>"+strQryparam);
		
		
		
		//All transactions
		if(TransactionStatus.equals("1")){
			
			
			selQry = "from TransationMonitoring where  TXN_DATE LIKE "+"'"+strQryparam+"%'" ;
			
		}
		
		
		//Success Transaction
		if(TransactionStatus.equals("2")){
			
			selQry = "from TransationMonitoring where  TXN_DATE = "+"'"+strQryparam+"'"+ " and RESP_CODE = 88";
			
		}
		
		
		//Success Transaction
		if(TransactionStatus.equals("3")){
					
					selQry = "from TransationMonitoring where  TXN_DATE= "+"'"+strQryparam+"'"+ " and RESP_CODE = 9889";
					
		}
		
		
		
		
		Query qry = getSession().createQuery(selQry);
		
		
	
       if (qry.list() != null && !qry.list().isEmpty()) {
		    System.out.println("getDailyReport ");
		    reportList = qry.list();
	   
		}
       
       
       
       System.out.println("reportList===>"+reportList);
     
		
		
		return reportList;
	}

	
	public List<TransationMonitoring> getMonthlyReport(String strDate,
			String strTransactionstatus) {
		// TODO Auto-generated method stub
		
		 List reportList = null;
		 
		 String[] strdateSplit= strDate.split(" ");
		 
		 String strMonth = strdateSplit[0];
		 
		 String strMonthinAplphabet = null;
		 
		 String selQry = null;
		 
		 String strQryparam = null;
		    
		    if(strMonth.equals("January")){
		    	
		    	strMonthinAplphabet = "JAN";
		    	
		    }
		    
	        if(strMonth.equals("February")){
		    	
		    	strMonthinAplphabet = "FEB";
		    	
		    }
	        
	       if(strMonth.equals("March")){
		    	
		    	strMonthinAplphabet = "MAR";
		    	
		    }
	       
	       if(strMonth.equals("April")){
		    	
		    	strMonthinAplphabet = "APR";
		    	
		    }
	       
	       if(strMonth.equals("May")){
		    	
		    	strMonthinAplphabet = "MAY";
		    	
		    }
	       
	       if(strMonth.equals("June")){
		    	
		    	strMonthinAplphabet = "JUN";
		    	
		    }
	       
	        if(strMonth.equals("July")){
		    	
		    	strMonthinAplphabet = "JUL";
		    	
		    }
	        
	        if(strMonth.equals("August")){
		    	
		    	strMonthinAplphabet = "AUG";
		    	
		    }
	        
	       if(strMonth.equals("September")){
		    	
		    	strMonthinAplphabet = "SEP";
		    	
		    }
	       
	       if(strMonth.equals("October")){
		    	
		    	strMonthinAplphabet = "OCT";
		    	
		    }
	       
	       if(strMonth.equals("November")){
		    	
		    	strMonthinAplphabet = "NOV";
		    	
		    }
	       
	       if(strMonth.equals("December")){
		    	
		    	strMonthinAplphabet = "DEC";
		    	
		    }
	       
	       
	      // strQryparam = strMonthinAplphabet;
	       
	       strQryparam = "JUL";
   		
			System.out.println("strQryparam===>"+strQryparam);
			
			
			
			//All transactions
			if(strTransactionstatus.equals("1")){
				
				
				selQry = "from TransationMonitoring where  TXN_DATE LIKE "+"'%"+strQryparam+"%'" ;
				
			}
			
			
			//Success Transaction
			if(strTransactionstatus.equals("2")){
				
				selQry = "from TransationMonitoring where  TXN_DATE LIKE "+"'%"+strQryparam+"%'"+ " and RESP_CODE = 88";
				
			}
			
			
			//Success Transaction
			if(strTransactionstatus.equals("3")){
						
						selQry = "from TransationMonitoring where  TXN_DATE LIKE "+"'%"+strQryparam+"%'"+ " and RESP_CODE = 9889";
						
			}
	    	Query qry = getSession().createQuery(selQry);
		   if (qry.list() != null && !qry.list().isEmpty()) {
			    System.out.println("getDailyReport ");
			    reportList = qry.list();
		   
			}
	       
	       
	       
	       System.out.println("reportList===>"+reportList);
	       
	         
		 
		return reportList;
	}

	
	public List<TransationMonitoring> showTxnStatement(String strmerchantId) {
		// TODO Auto-generated method stub
		
		List<TransationMonitoring> reportList = null;
		
		// success Transaction
		  String selQry = "from TransationMonitoring where  MERCHANT_ID = "+"'"+strmerchantId+"'"+ " AND RESP_CODE = 88 ";
		
		  Query qry = getSession().createQuery(selQry);
		  
		   if (qry.list() != null && !qry.list().isEmpty()) {
			    System.out.println("getDailyReport ");
			    reportList = qry.list();
		   
			}
		
		
		return reportList;
	}

	public List<UserRegistration> showUserModification(String strEmployeeId,
			String strUserName, String strEmailId) {
		
		 List<UserRegistration> reportList = null;
		// TODO Auto-generated method stub
		 
		 String selQry = "from UserRegistration where  EMPID = "+"'"+strEmployeeId+"'"+ " AND NAME = "+"'"+strUserName+"'"+ " AND EMAIL_ID = "+"'"+strEmailId+"'" ;
		 
		 Query qry = getSession().createQuery(selQry);
		  
		   if (qry.list() != null && !qry.list().isEmpty()) {
			    System.out.println("showUserModification ");
			    reportList = qry.list();
		   
			}
		 
		return reportList;
	}

	public boolean updateUserDetails(String strPkId,String strEmpId,
			String strUsername, String strBranchcode, String strEmailId,
			String strDesignation, String strTel, String strMobile,
			String strDept, String strFinalDate, String strAddress, String strCountry) {
		// TODO Auto-generated method stub
		
		boolean isUpdated = false;
		
		int result = 0;
		
		UserRegistration ureg = new UserRegistration();
		
		try{
		
			
			String updQry = "update UserRegistration set name = "+"'"+ strUsername +"'"+" , "
			         + "  BRANCH_CODE = "+"'"+ strBranchcode +"'"+" , "
			         + "  DESIGNATION = "+"'"+ strDesignation +"'"+" ,"
			         + "  DEPARTMENT = "+"'"+ strDept +"'"+","
			      /*   + "  dob = "+"'"+ strFinalDate +"'"+" , "  */
			         + "  EMAIL_ID = "+"'"+ strEmailId +"'"+" , " 
			         + "  MOBILE = "+"'"+ Long.valueOf(strMobile) +"'"+" , " 
			         + "  TEL = "+ strTel+"," 
			         + "  ADDRESS = "+"'"+ strAddress +"'"+" , " 
			         + "  COUNTRY = "+"'"+ strCountry +"'"+" , "
			         + "  EMPID = "+"'"+ strEmpId +"'"+"  WHERE ID = "+strPkId;
			
			
			
			
		/*String updQry = "update UserRegistration set name = "+"'"+ strUsername +"'"+" , "
				         + "  branchcode = "+"'"+ strBranchcode +"'"+" , "
				         + "  designation = "+"'"+ strDesignation +"'"+" ,"
				         + "  DEPARTMENT = "+"'"+ strDept +"'"+" , " 
				         + "  dob = "+"'"+ strFinalDate +"'"+" , " 
				         + "  emailid = "+"'"+ strEmailId +"'"+" , " 
				         + "  mobile = "+"'"+ strMobile +"'"+" , " 
				         + "  tel = "+"'"+ strTel +"'"+" , " 
				         + "  address = "+"'"+ strAddress +"'"+" , " 
				         + "  country = "+"'"+ strCountry +"'"+" , " 
				         + "  empid = "+"'"+ strEmpId +"'"+"  WHERE Id = "+"'"+strPkId +"'";*/
			
			/*String hql = "UPDATE UserRegistration set name = :name "  + 
		             "WHERE Id = :Id";*/
			
			/*Query query = getSession().createQuery(hql);
			query.setParameter("name", strUsername);
			query.setInteger("Id", Integer.parseInt(strPkId));
			*/
			
			
			Query query = getSession().createQuery(updQry);
			
			result = query.executeUpdate();
			System.out.println("Rows affected: " + result);
			
			
			/*String updQry = "update UserRegistration set name = "+"'"+ strUsername +"'"+" , "
			               +"  WHERE Id = "+"'"+strPkId +"'";
			
			
			
		
		
	
				        
		
         Query updateChangedPwd = getSession().createQuery(updQry);
		 
         result=updateChangedPwd.executeUpdate();*/
         
		}catch(Exception e){
			
			 e.printStackTrace();
		}	
		

        if(result==1){
			
        	isUpdated = true;
		}
		
		
        System.out.println("isupdated==>"+isUpdated);
		
		return isUpdated;
	}
	
	public void updateautopassword(String hdnmerchantId,String decryptedPwd) {
		// TODO Auto-generated method stub
		System.out.println("updateautopassword");
		int result=0;
		try{
		    String query = "update Merchant set changedPassword =  "+"'"+decryptedPwd+"'" +" where merchant_Id = "+"'"+hdnmerchantId+"'";
		
		    Query updateChangedPwd = getSession().createQuery(query);
		
	      result=updateChangedPwd.executeUpdate();
		 
		}catch(Exception e){
			
			 e.printStackTrace();
		}	
		
	}	
	
	public List<Admin> checkAdminDetails(String username, String password){
		List<Admin> merchantdetails = null;
		try {
			String selquery = "from Admin where admin_username = "+"'"+username+"' and admin_password = "+"'"+password+"'";
			
			System.out.println("===selquery====>"+selquery);
			
			Query q = getSession().createQuery(selquery);  
			if (q.list() != null && !q.list().isEmpty()) {
				merchantdetails = q.list();
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
		}
		return merchantdetails;
	}
	
	public int saveAudit(AuditTrial audit){
		int id = 0;
		try{
		  id =  (Integer) hibernateTemplate.save(audit);
		  }catch(Exception e){
			  e.printStackTrace();
		  }
		return id;
	}
	
	public long saveBranchCode(BranchCode bc){
		long id = 0;
		try{
		  id =  (Long) hibernateTemplate.save(bc);
		  }catch(Exception e){
			  e.printStackTrace();
		  }
		return id;
	}
	
	public long saveDepartDes(DepartmentDesignation dd){
		long id = 0;
		try{
		  id =  (Long) hibernateTemplate.save(dd);
		  }catch(Exception e){
			  e.printStackTrace();
		  }
		return id;
	}
	
	public List<UserRegistration> loadUsername(String empid){
		List<UserRegistration> merchantdetails = null;
		try {
			String selquery = "from UserRegistration where empid = "+"'"+empid+"'";
			Query q = getSession().createQuery(selquery);  
			if (q.list() != null && !q.list().isEmpty()) {
				merchantdetails = q.list();
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		finally {
		}
		return merchantdetails;
	}

	public void updateadminpassword(String adminid, String decryptedPwd) {
		// TODO Auto-generated method stub
		System.out.println("updateautopassword");
		String id=adminid.trim();
		int result=0;
		try{
		    String query = "update Admin set autopassword =  "+"'"+decryptedPwd+"'" +" where adminid = "+"'"+id+"'";
		
		    Query updateChangedPwd = getSession().createQuery(query);
		
	      result=updateChangedPwd.executeUpdate();
		 
		}catch(Exception e){
			
			 e.printStackTrace();
		}	
		
	}	

	public void updateadminreset(String adminid, String newpassword) {
		// TODO Auto-generated method stub
		System.out.println("updateautopassword");
		System.out.println("newpassword"+newpassword);
		String id=adminid.trim();
		int result=0;
		try{
		    String query = "update Admin set password =  "+"'"+newpassword+"'" +" where adminid = "+"'"+id+"'";
		
		    Query updateChangedPwd = getSession().createQuery(query);
		
	      result=updateChangedPwd.executeUpdate();
		 
		}catch(Exception e){
			
			 e.printStackTrace();
		}	
		
}
	@SuppressWarnings("unchecked")
	public List<Securitytable> getSecurityques(){
		List<Securitytable> securlist = null;
		try{
		String query = "from Securitytable";
		Query insertqforauth = getSession().createQuery(query);
		 if (insertqforauth.list() != null && !insertqforauth.list().isEmpty()) {
			 securlist = insertqforauth.list();
			  
		 }
		}catch(Exception e){
			e.printStackTrace();
		}
   	 	return securlist;
	}
	@SuppressWarnings("unchecked")
	public List<Securitytable> securitydetails(String securityquestion){
		List<Securitytable> questiondetail = null;
		String securityid=securityquestion.trim();
		try{
		String query = "from Securitytable where security_id = "+"'"+securityid+"'";
		Query insertqforauth = getSession().createQuery(query);
		 if (insertqforauth.list() != null && !insertqforauth.list().isEmpty()) {
			 questiondetail = insertqforauth.list();
			  
		 }
		}catch(Exception e){
			e.printStackTrace();
		}
   	 	return questiondetail;
	}
	@SuppressWarnings("unchecked")
	public List<Admin> getdetailsusingmailid(String mailid){
		List<Admin> admindetails = null;
		String email=mailid.trim();
		try{
		String query = "from Admin where email_id = "+"'"+email+"'";
		Query insertqforauth = getSession().createQuery(query);
		 if (insertqforauth.list() != null && !insertqforauth.list().isEmpty()) {
			 admindetails = insertqforauth.list();
			  
		 }
		}catch(Exception e){
			e.printStackTrace();
		}
   	 	return admindetails;
	}
	public void updatepwd1(String adminid, String newpassword) {
		// TODO Auto-generated method stub
		System.out.println("updateautopassword");
		System.out.println("newpassword"+newpassword);
		String id=adminid.trim();
		int result=0;
		try{
		    String query = "update Admin set passwd1 =  "+"'"+newpassword+"'" +" where adminid = "+"'"+id+"'";
		
		    Query updateChangedPwd = getSession().createQuery(query);
		
	      result=updateChangedPwd.executeUpdate();
		 
		}catch(Exception e){
			
			 e.printStackTrace();
		}	
		
}
	public void updatepwd2(String adminid, String newpassword) {
		// TODO Auto-generated method stub
		System.out.println("updateautopassword");
		System.out.println("newpassword"+newpassword);
		String id=adminid.trim();
		int result=0;
		try{
		    String query = "update Admin set passwd2 =  "+"'"+newpassword+"'" +" where adminid = "+"'"+id+"'";
		
		    Query updateChangedPwd = getSession().createQuery(query);
		
	         result=updateChangedPwd.executeUpdate();
		 
		}catch(Exception e){
			
			 e.printStackTrace();
		}	
		
    }

	@Override
	public List<TransationMonitoring> showTxnstatementresult(
			String strMerchantId, String strTrnDate, String strCardNo,
			String strTrnRefNo) {
		// TODO Auto-generated method stub
		System.out.println("In showTxnstatementresult");
		
		List<TransationMonitoring> transationMonitoringList = new ArrayList<TransationMonitoring>();
		
		/*SELECT * from REAL_TRANSACTION_MONITORING
		where  MERCHANT_ID = '656545'
		AND TXN_DATE >= TO_DATE('18-JUL-15','DD-MON-YY')
		AND TXN_DATE < TO_DATE('19-JUL-15', 'DD-MON-YY')
		AND TXN_REF_NO = 6546;*/
		
        /*if(strMerchantId!=null){
        	
        	
            String query = "from TransationMonitoring where MERCHANT_ID = "+"'"+strMerchantId+"'" + " "
            		+ "AND  TXN_DATE >= TO_DATE("+"'"+strTrnDate+"'"+",'DD-MON-YY') AND TXN_DATE < TO_DATE("+"'"+strTrnDate+"'"+", 'DD-MON-YY') AND TXN_REF_NO = "+strTrnRefNo;
			
		    Query insertqforauth = getSession().createQuery(query);
			
			 if (insertqforauth.list() != null && !insertqforauth.list().isEmpty()) {
				 
				 transationMonitoringList = insertqforauth.list();
			 }
			 
			 
			 return transationMonitoringList;
			
			
			
		}
		*/
		
		if(strMerchantId!= null){
			
			
			String query = "from TransationMonitoring where MERCHANT_ID = "+"'"+strMerchantId+"'";
			
			Query insertqforauth = getSession().createQuery(query);
			
			 if (insertqforauth.list() != null && !insertqforauth.list().isEmpty()) {
				 
				 transationMonitoringList = insertqforauth.list();
			 }
			 
			 
			 
		}
		return transationMonitoringList;
	}


	
}